{"version":3,"file":"static/js/31.aedd2b5f.chunk.js","mappings":"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","sources":["webpack://lk-test-app/./src/components/ContactItem/ContactItem.module.scss?1c6f","components/ContactItem/ContactItem.tsx","webpack://lk-test-app/./src/components/CreateForm/CreateForm.module.scss?7e3b","components/CreateForm/CreateForm.tsx","webpack://lk-test-app/./src/components/Paginator/Paginator.module.scss?ffc2","components/Paginator/Paginator.tsx","webpack://lk-test-app/./src/pages/Contacts/Contacts.module.scss?47b9","pages/Contacts/SearchForm.tsx","pages/Contacts/Contacts.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"ContactItem_contact__ytu+c\",\"name\":\"ContactItem_name__LTEsM\",\"info\":\"ContactItem_info__NvhQp\",\"actions\":\"ContactItem_actions__9W9lK\",\"actionBtn\":\"ContactItem_actionBtn__jxaRQ\",\"editInput\":\"ContactItem_editInput__QuLtX\",\"nameInput\":\"ContactItem_nameInput__N5PMN\",\"btn\":\"ContactItem_btn__vhQQd\"};","import { Field, Form, Formik } from \"formik\";\r\nimport React, { FC, memo, useState } from \"react\";\r\nimport deleteIcon from \"../../assets/images/delete.png\";\r\nimport editIcon from \"../../assets/images/edit.png\";\r\nimport { ContactsType } from \"../../types/types\";\r\nimport s from \"./ContactItem.module.scss\";\r\n\r\ntype PropsType = {\r\n  onDeleteContact: (id: number) => void;\r\n  onChangeContact: (contact: ContactsType, contactId: number) => void;\r\n};\r\n\r\nexport const ContactItem: FC<ContactsType & PropsType> = memo((props) => {\r\n  const { id, name, email, phone, address, onDeleteContact, onChangeContact } =\r\n    props;\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  const deleteContact = () => {\r\n    onDeleteContact(id);\r\n  };\r\n  const onSubmit = (values: ContactsType) => {\r\n    onChangeContact(values, id);\r\n    setEditMode(false);\r\n  };\r\n  const onEditMode = () => {\r\n    setEditMode(true);\r\n  };\r\n\r\n  const initialValues: ContactsType = {\r\n    id,\r\n    name,\r\n    email,\r\n    phone,\r\n    address: {\r\n      city: address.city,\r\n      street: address.street,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className={s.contact}>\r\n      <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n        <Form className={s.main}>\r\n          <h2 className={s.name}>\r\n            {editMode ? (\r\n              <Field\r\n                autoFocus\r\n                type=\"text\"\r\n                name=\"name\"\r\n                className={s.nameInput}\r\n              />\r\n            ) : (\r\n              name\r\n            )}\r\n          </h2>\r\n          <div className={s.content}>\r\n            <p className={s.info}>\r\n              <span>Email: </span>\r\n              {editMode ? (\r\n                <Field type=\"text\" name=\"email\" className={s.editInput} />\r\n              ) : (\r\n                email\r\n              )}\r\n            </p>\r\n            <p className={s.info}>\r\n              <span>Phone: </span>\r\n              {editMode ? (\r\n                <Field type=\"telephone\" name=\"phone\" className={s.editInput} />\r\n              ) : (\r\n                phone\r\n              )}\r\n            </p>\r\n            <p className={s.info}>\r\n              <span>City: </span>\r\n              {editMode ? (\r\n                <Field\r\n                  type=\"text\"\r\n                  name=\"address.city\"\r\n                  className={s.editInput}\r\n                />\r\n              ) : (\r\n                address.city\r\n              )}\r\n            </p>\r\n            <p className={s.info}>\r\n              <span>Street: </span>\r\n              {editMode ? (\r\n                <Field\r\n                  type=\"text\"\r\n                  name=\"address.street\"\r\n                  className={s.editInput}\r\n                />\r\n              ) : (\r\n                address.street\r\n              )}\r\n            </p>\r\n          </div>\r\n          {editMode ? (\r\n            <button className={s.btn} type=\"submit\">\r\n              Save change\r\n            </button>\r\n          ) : null}\r\n        </Form>\r\n      </Formik>\r\n      <div className={s.actions}>\r\n        <button onClick={onEditMode} className={s.actionBtn}>\r\n          <img src={editIcon} alt=\"edit\" />\r\n        </button>\r\n        <button onClick={deleteContact} className={s.actionBtn}>\r\n          <img src={deleteIcon} alt=\"delete\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"CreateForm_wrapper__frBTz\",\"content\":\"CreateForm_content__gzEYh\",\"header\":\"CreateForm_header__VWJ0s\",\"close\":\"CreateForm_close__egR2c\",\"main\":\"CreateForm_main__iYKhG\",\"fields\":\"CreateForm_fields__hRgmU\",\"input\":\"CreateForm_input__SgdJa\",\"btn\":\"CreateForm_btn__l2K7P\",\"error\":\"CreateForm_error__tOeyV\"};","import React, { FC, memo } from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport s from \"./CreateForm.module.scss\";\r\nimport { ContactsType } from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n  offCreateMode: () => void;\r\n  createContact: (contactBody: ContactsType) => void;\r\n  id: number;\r\n};\r\n\r\nexport const CreateForm: FC<PropsType> = memo(\r\n  ({ offCreateMode, createContact, id }) => {\r\n    const onClose = () => {\r\n      offCreateMode();\r\n    };\r\n\r\n    const onSubmit = (values: ContactsType, actions: any) => {\r\n      createContact(values);\r\n      actions.resetForm();\r\n      offCreateMode();\r\n    };\r\n\r\n    const initialValues: ContactsType = {\r\n      id,\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\",\r\n      address: {\r\n        city: \"\",\r\n        street: \"\",\r\n      },\r\n    };\r\n\r\n    const searchSchema = Yup.object().shape({\r\n      name: Yup.string().required(\"Field is required\"),\r\n      email: Yup.string().required(\"Field is required\"),\r\n      phone: Yup.string().required(\"Field is required\"),\r\n    });\r\n\r\n    return (\r\n      <div className={s.wrapper}>\r\n        <div className={s.content}>\r\n          <div className={s.header}>\r\n            <p onClick={onClose} className={s.close}>\r\n              x\r\n            </p>\r\n          </div>\r\n          <div className={s.main}>\r\n            <Formik\r\n              initialValues={initialValues}\r\n              onSubmit={onSubmit}\r\n              validationSchema={searchSchema}\r\n            >\r\n              {({ errors, touched }) => (\r\n                <Form>\r\n                  <div className={s.fields}>\r\n                    <div className={s.input}>\r\n                      <span>Name</span>\r\n                      <Field type=\"text\" name=\"name\" />\r\n                      {errors.name && touched.name ? (\r\n                        <p className={s.error}>{errors.name}</p>\r\n                      ) : null}\r\n                    </div>\r\n                    <div className={s.input}>\r\n                      <span>Email</span>\r\n                      <Field type=\"email\" name=\"email\" />\r\n                      {errors.email && touched.email ? (\r\n                        <p className={s.error}>{errors.email}</p>\r\n                      ) : null}\r\n                    </div>\r\n                    <div className={s.input}>\r\n                      <span>Phone</span>\r\n                      <Field type=\"telephone\" name=\"phone\" />\r\n                      {errors.phone && touched.phone ? (\r\n                        <p className={s.error}>{errors.phone}</p>\r\n                      ) : null}\r\n                    </div>\r\n                    <div className={s.input}>\r\n                      <span>City</span>\r\n                      <Field type=\"text\" name=\"address.city\" />\r\n                    </div>\r\n                    <div className={s.input}>\r\n                      <span>Street</span>\r\n                      <Field type=\"text\" name=\"address.street\" />\r\n                    </div>\r\n                  </div>\r\n                  <button type=\"submit\" className={s.btn}>\r\n                    Create contact\r\n                  </button>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"paginator\":\"Paginator_paginator__pjTlZ\",\"list\":\"Paginator_list__Tzds3\",\"selected\":\"Paginator_selected__S3Y0K\",\"pagBtn\":\"Paginator_pagBtn__Izbqk\"};","import React, { useState, FC, memo } from \"react\";\r\nimport s from \"./Paginator.module.scss\";\r\n\r\ntype PropsType = {\r\n  totalCount: number;\r\n  pageSize: number;\r\n  currentPage: number;\r\n  onPageChanged: (p: number) => void;\r\n};\r\n\r\nconst Paginator: FC<PropsType> = memo((props) => {\r\n  const pagesCount = Math.ceil(props.totalCount / props.pageSize);\r\n  const pages = [];\r\n  for (let i = 1; i <= pagesCount; i++) {\r\n    pages.push(i);\r\n  }\r\n\r\n  const portionSize = props.pageSize;\r\n  const portionCount = Math.ceil(props.totalCount / portionSize);\r\n\r\n  const [portionNumber, setPortionNumber] = useState(1);\r\n  const leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n  const rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n  const pagination = pages\r\n    .filter((p) => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n    .map((p) => {\r\n      return (\r\n        <li\r\n          key={p}\r\n          onClick={(e) => {\r\n            props.onPageChanged(p);\r\n          }}\r\n          className={props.currentPage === p ? s.selected : s.g}\r\n        >\r\n          {p}\r\n        </li>\r\n      );\r\n    });\r\n\r\n  return (\r\n    <div className={s.paginator}>\r\n      {portionNumber > 1 && (\r\n        <button\r\n          className={s.pagBtn}\r\n          onClick={() => setPortionNumber(portionNumber - 1)}\r\n        >\r\n          prev\r\n        </button>\r\n      )}\r\n      <ul className={s.list}>{pagination}</ul>\r\n      {portionCount > portionNumber * props.pageSize && (\r\n        <button\r\n          className={s.pagBtn}\r\n          onClick={() => setPortionNumber(portionNumber + 1)}\r\n        >\r\n          next\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Paginator;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Contacts_container__30HxZ\",\"form\":\"Contacts_form__WnAng\",\"input\":\"Contacts_input__GkWaA\",\"btn\":\"Contacts_btn__vyTvW\",\"contacts\":\"Contacts_contacts__9PEIP\",\"contact\":\"Contacts_contact__6QK4+\",\"main\":\"Contacts_main__4Kdkf\",\"name\":\"Contacts_name__6ST8b\",\"info\":\"Contacts_info__PVgua\",\"actions\":\"Contacts_actions__+dwZV\",\"actionBtn\":\"Contacts_actionBtn__8ZLxu\",\"create\":\"Contacts_create__NOW2X\",\"createBtn\":\"Contacts_createBtn__TOZxV\",\"searchForm\":\"Contacts_searchForm__08SSy\",\"error\":\"Contacts_error__aF7FD\",\"editInput\":\"Contacts_editInput__Hv+Ft\",\"nameInput\":\"Contacts_nameInput__NpwWh\",\"pagination\":\"Contacts_pagination__awgFP\"};","import React, { FC, memo } from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport s from \"./Contacts.module.scss\";\r\n\r\ninterface MyFormValues {\r\n  search: string;\r\n}\r\ninterface PropsType {\r\n  findContact: (term: string) => void;\r\n}\r\n\r\nexport const SearchForm: FC<PropsType> = memo(({ findContact }) => {\r\n  const onSubmit = (values: MyFormValues) => {\r\n    findContact(values.search);\r\n  };\r\n\r\n  const initialValues: MyFormValues = { search: \"\" };\r\n\r\n  const searchSchema = Yup.object().shape({\r\n    search: Yup.string().required(\"Field is required\"),\r\n  });\r\n\r\n  return (\r\n    <div className={s.searchForm}>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={onSubmit}\r\n        validationSchema={searchSchema}\r\n      >\r\n        {({ errors, touched }) => (\r\n          <>\r\n            <Form className={s.form}>\r\n              <Field\r\n                type=\"text\"\r\n                name=\"search\"\r\n                placeholder=\"search contact...\"\r\n                className={s.input}\r\n              />\r\n              <button type=\"submit\" className={s.btn}>\r\n                Find\r\n              </button>\r\n            </Form>\r\n            {errors.search && touched.search ? (\r\n              <p className={s.error}>{errors.search}</p>\r\n            ) : null}\r\n          </>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n});\r\n","import React, { FC, memo, useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport editIcon from \"../../assets/images/edit.png\";\r\nimport { ContactItem } from \"../../components/ContactItem/ContactItem\";\r\nimport { CreateForm } from \"../../components/CreateForm/CreateForm\";\r\nimport Paginator from \"../../components/Paginator/Paginator\";\r\nimport Preloader from \"../../components/Preloader/Preloader\";\r\nimport { useTypedSelector } from \"../../hooks/useTypedSelector\";\r\nimport {\r\n  actions,\r\n  changeContact,\r\n  createNewContact,\r\n  deleteContact,\r\n  requestContacts,\r\n} from \"../../redux/reducers/contacts-reducer\";\r\nimport { ContactsType } from \"../../types/types\";\r\nimport s from \"./Contacts.module.scss\";\r\nimport { SearchForm } from \"./SearchForm\";\r\n\r\nconst Contacts: FC = memo(() => {\r\n  const dispatch = useDispatch();\r\n  const { contacts, isFetching, limit, page, totalCount } = useTypedSelector(\r\n    (state) => state.contacts\r\n  );\r\n  const [isCreate, setIsCreate] = useState(false);\r\n  const { setFindedContacts } = actions;\r\n\r\n  useEffect(() => {\r\n    if (contacts.length == 0) {\r\n      dispatch(requestContacts(page, limit));\r\n    }\r\n  }, []);\r\n\r\n  const findContact = (term: string) => {\r\n    dispatch(setFindedContacts(term));\r\n  };\r\n\r\n  const onCreateMode = () => {\r\n    setIsCreate(true);\r\n  };\r\n  const offCreateMode = () => {\r\n    setIsCreate(false);\r\n  };\r\n  const createContact = (contactBody: ContactsType) => {\r\n    dispatch(createNewContact(contactBody));\r\n  };\r\n  const onDeleteContact = (id: number) => {\r\n    dispatch(deleteContact(id));\r\n  };\r\n  const onChangeContact = (contact: ContactsType, contactId: number) => {\r\n    dispatch(changeContact(contact, contactId));\r\n  };\r\n\r\n  const onPageChanged = (page: number) => {\r\n    dispatch(requestContacts(page, limit));\r\n  };\r\n\r\n  return (\r\n    <div className={s.container}>\r\n      <div className={s.create}>\r\n        <button onClick={onCreateMode} className={s.createBtn}>\r\n          Create new contact\r\n          <span>\r\n            <img src={editIcon} alt=\"create\" />\r\n          </span>\r\n        </button>\r\n      </div>\r\n      <SearchForm findContact={findContact} />\r\n      {isFetching ? (\r\n        <Preloader />\r\n      ) : (\r\n        <div className={s.contacts}>\r\n          {contacts.map((c) => (\r\n            <ContactItem\r\n              onChangeContact={onChangeContact}\r\n              onDeleteContact={onDeleteContact}\r\n              key={c.id}\r\n              {...c}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n      <div className={s.pagination}>\r\n        <Paginator\r\n          totalCount={totalCount}\r\n          pageSize={limit}\r\n          currentPage={page}\r\n          onPageChanged={onPageChanged}\r\n        />\r\n      </div>\r\n\r\n      {isCreate ? (\r\n        <CreateForm\r\n          createContact={createContact}\r\n          offCreateMode={offCreateMode}\r\n          id={contacts.length + 1}\r\n        />\r\n      ) : null}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Contacts;\r\n"],"names":["ContactItem","memo","props","id","name","email","phone","address","onDeleteContact","onChangeContact","useState","editMode","setEditMode","initialValues","city","street","className","s","onSubmit","values","autoFocus","type","onClick","src","editIcon","alt","deleteIcon","CreateForm","offCreateMode","createContact","searchSchema","Yup","shape","required","actions","resetForm","validationSchema","errors","touched","pagesCount","Math","ceil","totalCount","pageSize","pages","i","push","portionSize","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pagination","filter","p","map","e","onPageChanged","currentPage","SearchForm","findContact","search","placeholder","dispatch","useDispatch","useTypedSelector","state","contacts","isFetching","limit","page","isCreate","setIsCreate","setFindedContacts","useEffect","length","requestContacts","deleteContact","contact","contactId","changeContact","term","Preloader","c","contactBody","createNewContact"],"sourceRoot":""}